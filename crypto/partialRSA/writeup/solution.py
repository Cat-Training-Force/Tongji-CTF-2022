from Crypto.Util.number import *


def rsa_dec(p, n, e, c):
    q = n // p
    d = inverse(e, (p - 1) * (q - 1))
    m = pow(c, d, n)
    return m


n = 94385008254770614944426074019139823266029186378069588330219215804173041332457889880798363397760750523143488374656482167979068445707126453693822115025619132252522388440356664821216180157267335027681315970907639975444874660962607533805159483454967423667943997002082127262981154971630883519582879091089610724123
x = 204784609668710703904679354706078794421821263545487908723290743686774849308560701999362986858126309774190516953209137786
e = 11044761593216459910749966985343843315440735553372599446085750307553853729368603350929674125163839512258810275667848512358287375363240534940351547181717693
c = 60690989154627439339860223772025089140958465632574215275886245340308699928591629420072703571518019845698629687993635233585887137529226647602278921708240983774562832535212239505097145892046874360359705087222252962227544394591665663150612924092636873927697615108427829935075181149041513618344370031113687448155

''' Sage
N = 
x = 

print (N.nbits())
print (x.nbits())
prime_bit = 512
shift_bit = x.nbits()
pbar=[]
qbar=[]

def dfs(n,p):
    if(n==shift_bit):
        pbar.append(p)
        qbar.append(x^^p)
        return
    p_next=(1<<(n+1))+p
    q_next=(x&(2**(n+1)-1))^^p_next
    if((p_next*q_next)&(2**(n+1)-1)==(N&(2**(n+1)-1))):
        dfs(n+1,p_next)
    p_next=p
    q_next=(x&(2**(n+1)-1))^^p_next
    if((p_next*q_next)&(2**(n+1)-1)==(N&(2**(n+1)-1))):
        dfs(n+1,p_next)

dfs(1,0)
dfs(1,1)

def partial_p(p0, kbits, n):
    PR.<x> = PolynomialRing(Zmod(n))
    nbits = n.nbits()

    f = 2^kbits*x + p0
    f = f.monic()
    roots = f.small_roots(X=2^(1024//2-kbits), beta=0.3)  # find root < 2^(nbits//2-kbits) with factor >= n^0.3
    if roots:
        x0 = roots[0]
        p = gcd(2^kbits*x0 + p0, n)
        return ZZ(p)


i = 0
for k in pbar:
    i = i + 1
    print(i, "/", len(pbar))
    # print (k[0], shift_bit, n)
    res = partial_p(k, shift_bit, N)
    if res:
        print (res)
        break
'''
p = 10515567217925649579707341572874655817174409370345384002691579593304258518816160707000246686733712538776904347833053381064313404882088341451438918194151659

m = rsa_dec(p, n, e, c)
print(long_to_bytes(m))
# b'C0pp3rsm17h_a77ack_0n_P_Low_b17s'
